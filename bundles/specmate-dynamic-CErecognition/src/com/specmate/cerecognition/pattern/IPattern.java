package com.specmate.cerecognition.pattern;

import java.util.ArrayList;

import com.specmate.cerecognition.causeeffectgraph.ICauseEffectGraph;
import com.specmate.cerecognition.causeeffectgraph.ICauseEffectPattern;
import com.specmate.cerecognition.sentence.ISentence;

/**
 * 
 * @author Julian Frattini
 *
 * Interface to causality patterns: Each pattern contains 
 *  - index : number for identification
 *  - sentence structure : the structure of a sentence to check compliance with this pattern
 *  - cause-effect-pattern : pattern containing the genetic algorithms to extract cause-/effect-expressions
 *  - accepted sentences : list of already approved sentences
 */

public interface IPattern {
	
	/**
	 * Gets the index of this causality pattern
	 * @return The index of this causality pattern
	 */
	public int getIndex();
	
	/**
	 * Gets the sentence structure, which identifies this pattern
	 * @return The sentence structure of this causality pattern
	 */
	public IStructure getStructure();
	
	/**
	 * Gets the generation pattern, which contains the extraction algorithms
	 * @return The generation pattern of this causality pattern
	 */
	public ICauseEffectPattern getGenerationPattern();
	
	/**
	 * Gets the list of already accepted and approved sentences to this causality pattern
	 * @return List of accepted sentences
	 */
	public ArrayList<ISentence> getAccepted();
	
	/**
	 * Checks if a sentence is compliant to the pattern
	 * @param candidate Sentence under test
	 * @return True, if the inner nodes of the sentence equal the sentence structure associated with this pattern
	 */
	public boolean checkCompliance(ISentence candidate);
	
	/**
	 * Adds a new sentence to the list of approved sentences
	 * @param candidate Sentence which is compliant to this pattern
	 */
	public void addSentence(ISentence candidate);
	
	/**
	 * Generates the cause-effect-graph of a compliant sentence
	 * @param sentence Sentence which is compliant to this pattern
	 * @return The cause-effect-graph, which represents the causal relation of the given sentence
	 */
	public ICauseEffectGraph generateCauseEffectGraph(ISentence sentence);
	
	/**
	 * Checks whether a sentence is actually compliant with the pattern in regard to the desired cause-effect-graph
	 * @param candidate The sentence, which is seemingly compliant to the pattern
	 * @param ceg The cause-effect-graph, which is associated to the sentence
	 * @return True, if the cause-effect-graph generated by the pattern matches the one given
	 */
	public boolean isAffiliated(ISentence candidate, ICauseEffectGraph ceg);
	
	/**
	 * Attempt to specify the pattern in the case, that a non-causal sentence has the same sentence structure as defined 
	 * in this pattern and is currently recognized
	 * @param sentence Falsely compliant sentence
	 * @return True, if the deflection algorithm was successful and the intruding sentence is no longer compliant
	 */
	public boolean deflectIntruder(ISentence sentence);
	
	/**
	 * Attempt to split a pattern in the case, that a causal sentence with a compliant sentence structure has
	 * been identified to actually require a different cause-effect-graph (therefore different extraction algorithms)
	 * @param sentence Falsely compliant sentence
	 * @return True, if the differentiation algorithm was successful and the intruding sentence is no longer compliant
	 */
	public IStructure differentiateSimilar(ISentence sentence);
	
	/**
	 * Gets the causality pattern in a human-readable form
	 * @return Causality pattern in a human-readable form
	 */
	public String toString();
}
